// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
    STAFF
}

//////////////////// Authentication ////////////////////
// Necessary for Next auth

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    password      String?
    phone         String?
    role          Role            @default(USER)
    emailVerified DateTime?
    image         String?
    bonuses       Int             @default(0)
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    Basket      Basket?
    favoritedBy Favorite[]
    Location    Location[]
    Order       Order[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Category {
    id          String    @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isDeleted   Boolean   @default(false)
    Product     Product[]
}

model Product {
    id          String       @id @default(cuid())
    name        String
    description String?
    isSpicy     Boolean      @default(false)
    price       Int
    gramm       Int
    nutrition   Json?        @default("{}")
    isDeleted   Boolean      @default(false)
    categoryId  String?
    category    Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    image       String?
    BaketItem   BasketItem[]
    Favorite    Favorite[]
    OrderItem   OrderItem[]
}

model Basket {
    id        String       @id @default(cuid())
    userId    String       @unique
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     BasketItem[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model BasketItem {
    id        String   @id @default(cuid())
    basketId  String
    productId String
    quantity  Int      @default(1)
    basket    Basket   @relation(fields: [basketId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([basketId, productId])
}

model Favorite {
    id        String   @id @default(cuid())
    userId    String
    productId String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, productId])
}

model Location {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   String
    isPrivate Boolean  @default(false)
    entrance  String?
    doorCode  String?
    floor     String?
    apartment String?
    comment   String?
    Order     Order[]
}

model Order {
    id         String      @id @default(cuid())
    userId     String
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    locationId String
    location   Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
    items      OrderItem[]
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RestaurantLocation {
    id           String   @id @default(cuid())
    name         String
    address      String
    workingHours String
    phone        String
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}
